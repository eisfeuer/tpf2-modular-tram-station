local Station = require('modutram_station')
local Blueprint = require('modutram_station_blueprint')
local t = require('modutram_types')

local ERA_A = 1
local ERA_B = 2
local ERA_C = 3

local SMALL = 0
local MEDIUM = 1
local LARGE = 2

local function get_station_base_modules(params)
    return {
        platform_left = 'modules/platform_single_right_era_c.module',
        platform_right = 'modules/platform_single_left_era_c.module',
        platform_double = 'modules/platform_double_era_c.module',
        track_up_doors_right = 'modules/track_single_up_doors_right_era_c.module',
        track_down_doors_right = 'modules/track_single_down_doors_right_era_c.module',
        track_double_doors_right = 'modules/track_single_double_doors_right_era_c.module'
    }
end

local function segment_has_shelter(shelter_param, segment_id, has_even_segment_count)
    if shelter_param == 0 then
        return false
    end

    if segment_id == 0 then
        return true
    end

    return has_even_segment_count and segment_id == 1
end

local function place_fence_arount_shelter(segment_blueprint, shelter_size, fence_6m, fence_120cm)
    if segment_blueprint:has_even_segment_count() then
        if segment_blueprint:get_current_segment() == 0 then
            segment_blueprint:add_asset(1, t.ASSET_FENCE_6M, fence_6m)
            segment_blueprint:add_asset(2, t.ASSET_FENCE_6M, fence_6m)
            if shelter_size ~= LARGE then
                segment_blueprint:add_asset(11, t.ASSET_FENCE_120CM, fence_120cm)
                if shelter_size == SMALL then
                    segment_blueprint:add_asset(12, t.ASSET_FENCE_120CM, fence_120cm)
                    segment_blueprint:add_asset(13, t.ASSET_FENCE_120CM, fence_120cm)
                end
            end
        else
            segment_blueprint:add_asset(2, t.ASSET_FENCE_6M, fence_6m)
            segment_blueprint:add_asset(3, t.ASSET_FENCE_6M, fence_6m)
            if shelter_size ~= LARGE then
                segment_blueprint:add_asset(5, t.ASSET_FENCE_120CM, fence_120cm)
                if shelter_size == SMALL then
                    segment_blueprint:add_asset(4, t.ASSET_FENCE_120CM, fence_120cm)
                    segment_blueprint:add_asset(3, t.ASSET_FENCE_120CM, fence_120cm)
                end
            end
        end
    else
        if shelter_size == SMALL then
            segment_blueprint:add_asset(1, t.ASSET_FENCE_6M, fence_6m)
            segment_blueprint:add_asset(3, t.ASSET_FENCE_6M, fence_6m)
        else
            segment_blueprint:add_asset(1, t.ASSET_FENCE_120CM, fence_120cm)
            segment_blueprint:add_asset(2, t.ASSET_FENCE_120CM, fence_120cm)

            segment_blueprint:add_asset(14, t.ASSET_FENCE_120CM, fence_120cm)
            segment_blueprint:add_asset(15, t.ASSET_FENCE_120CM, fence_120cm)

            if shelter_size == MEDIUM then
                segment_blueprint:add_asset(3, t.ASSET_FENCE_120CM, fence_120cm)
                segment_blueprint:add_asset(4, t.ASSET_FENCE_120CM, fence_120cm)

                segment_blueprint:add_asset(12, t.ASSET_FENCE_120CM, fence_120cm)
                segment_blueprint:add_asset(13, t.ASSET_FENCE_120CM, fence_120cm)
            end
        end
    end
end

local function choose_billboard(billboards, asset_id, segment_id)
    return billboards[((asset_id + math.abs(segment_id)) % #billboards) + 1]
end

local function select_billboard(era, asset_id, segment_id)
    if era == ERA_A then
        return choose_billboard({
            'modules/assets/billboard_era_a_1.module',
            'modules/assets/billboard_era_a_2.module'
        }, asset_id, segment_id)
    end

    if era == ERA_B then
        return choose_billboard({
            'modules/assets/billboard_era_b_large_1.module',
            'modules/assets/billboard_era_b_large_2.module'
        }, asset_id, segment_id)
    end

    return choose_billboard({
        'modules/assets/billboard_era_c_clp_1.module',
        'modules/assets/billboard_era_c_clp_2.module',
        'modules/assets/billboard_era_c_clp_3.module'
    }, asset_id, segment_id)
end

local function select_shelter(era, size)
    local shelters = {
        {
            'modules/assets/shelter_small_era_a.module',
            'modules/assets/shelter_medium_era_a.module',
            'modules/assets/shelter_large_era_a.module',
        },
        {
            'modules/assets/shelter_small_era_b.module',
            'modules/assets/shelter_medium_era_b.module',
            'modules/assets/shelter_large_era_b.module',
        },
        {
            'modules/assets/shelter_small_era_c.module',
            'modules/assets/shelter_medium_era_c.module',
            'modules/assets/shelter_large_era_c.module',
        }
    }
    return shelters[era][size + 1]
end

function data()
    return { 
        type = 'STREET_STATION',
        description = {
            name = _('Modular Tram Station'),			
            description = _('Base Set.')
        },
        availability = {
            yearFrom = 0,
            yearTo = 0
        },
        params = {
            {
                key = 'modutram_planning_mode',
                name = _('modutram_planning_mode'),
                values = { _('Off'), _('On'), },
                defaultIndex = 0,
            },
        },
        constructionTemplates = {
            {
                type = 'DYNAMIC',
                constructionType = 'STREET_STATION',
                availability = {
                    yearFrom = 0,
                    yearTo = 0
                },
                description = {
                    name = _('Modular Tram Station'),
                    description = _('Base Set.'),
                    icon = 'ui/construction/station/street/passenger_era_a.tga'
                },
                data = {
                    params = {
                        {
                            key = 'modutram_platform_placing_pattern',
                            name = _('modutram_platform_placing_pattern'),
                            values = { _('0'), _('1'), _('2'), _('3'), _('4') },
                            defaultIndex = 0,
                        },
                        {
                            key = 'modutram_platforms_left',
                            name = _('modutram_platforms_left'),
                            values = { _('0'), _('1'), _('2'), _('3'), ('4'), _('5') },
                            defaultIndex = 1,
                        },
                        {
                            key = 'modutram_platforms_right',
                            name = _('modutram_platforms_right'),
                            values = { _('0'), _('1'), _('2'), _('3'), ('4'), _('5') },
                            defaultIndex = 1,
                        },
                        {
                            key = 'modutram_platform_length',
                            name = _('modutram_platform_length'),
                            values = { _('18m'), _('36m'), _('54m'), _('72m'), _('90m') },
                            defaultIndex = 2,
                        },
                        {
                            key = 'modutram_shelter',
                            name = _('modutram_shelter'),
                            values = { _('off'), _('era_a'), _('era_b'), _('era_c') },
                            defaultIndex = 3,
                        },
                        {
                            key = 'modutram_shelter_size',
                            name = _('modutram_shelter_size'),
                            values = { _('small'), _('mid'), _('large') },
                            defaultIndex = 1,
                        },
                        {
                            key = 'modutram_fences',
                            name = _('modutram_lamps'),
                            values = { _('off'), _('era_a'), _('era_b'), _('era_c') },
                            defaultIndex = 3,
                        },
                        {
                            key = 'modutram_lamps',
                            name = _('modutram_lamps'),
                            values = { _('off'), _('era_a'), _('era_b'), _('era_c') },
                            defaultIndex = 3,
                        },
                        {
                            key = 'modutram_benches',
                            name = _('modutram_benches'),
                            values = { _('off'), _('era_a'), _('era_b'), _('era_c') },
                            defaultIndex = 3,
                        },
                        {
                            key = 'modutram_billboards',
                            name = _('modutram_billboards'),
                            values = { _('off'), _('era_a'), _('era_b'), _('era_c') },
                            defaultIndex = 3,
                        },
                        {
                            key = 'modutram_stop_signs',
                            name = _('modutram_stop_signs'),
                            values = { _('off'), _('era_a'), _('era_b'), _('era_c') },
                            defaultIndex = 3,
                        },
                        {
                            key = 'modutram_station_signs',
                            name = _('modutram_station_signs'),
                            values = { _('off'), _('era_a'), _('era_b'), _('era_c') },
                            defaultIndex = 3,
                        },
                        {
                            key = 'modutram_destination_display',
                            name = _('modutram_destination_display'),
                            values = { _('off'), _('on') },
                            defaultIndex = 1,
                        },
                    }
                }
            }
        },
        createTemplateFn = function(params)
            local blueprint = Blueprint:new{
                platform_placing_pattern = params.modutram_platform_placing_pattern,
                modules = get_station_base_modules(params),
                platforms_left = params.modutram_platforms_left,
                platforms_right = params.modutram_platforms_right,
                segments_per_platform = params.modutram_platform_length + 1
            }

            blueprint:decorate_platforms(function(segment_blueprint)

                -- Shelters
                if params.modutram_shelter > 0 then
                    if segment_blueprint:has_even_segment_count() and segment_blueprint:get_current_segment() == 0 then
                        segment_blueprint:add_asset(2, t.ASSET_SHELTER, select_shelter(params.modutram_shelter, params.modutram_shelter_size))
                    end

                    if segment_blueprint:has_odd_segment_count() and segment_blueprint:get_current_segment() == 0 then
                        segment_blueprint:add_asset(1, t.ASSET_SHELTER, select_shelter(params.modutram_shelter, params.modutram_shelter_size))
                    end
                end

                -- Fences
                if params.modutram_fences > 0 then
                    local fence_modules_6m = {
                        'modules/assets/fence_6m_era_a.module',
                        'modules/assets/fence_6m_era_b.module',
                        (segment_blueprint:is_bottom_platform_segment() or segment_blueprint:is_top_platform_segment())
                            and 'modules/assets/fence_6m_era_c.module'
                            or 'modules/assets/splash_guard_6m_era_c.module'
                    }
                    local fence_modules_120cm = {
                        'modules/assets/fence_120cm_era_a.module',
                        'modules/assets/fence_120cm_era_b.module',
                        'modules/assets/splash_guard_120cm_era_c.module'
                    }

                    if segment_has_shelter(params.modutram_shelter, segment_blueprint:get_current_segment(), segment_blueprint:has_even_segment_count()) then
                        place_fence_arount_shelter(segment_blueprint, params.modutram_shelter_size, fence_modules_6m[params.modutram_fences], fence_modules_120cm[params.modutram_fences])
                    else
                        segment_blueprint:add_asset(1, t.ASSET_FENCE_6M, fence_modules_6m[params.modutram_fences])
                        segment_blueprint:add_asset(2, t.ASSET_FENCE_6M, fence_modules_6m[params.modutram_fences])
                        segment_blueprint:add_asset(3, t.ASSET_FENCE_6M, fence_modules_6m[params.modutram_fences])
                    end
                end

                -- Lamps
                if params.modutram_lamps > 0 then
                    local lamp_modules = {
                        'modules/assets/lamp_era_a.module',
                        'modules/assets/lamp_era_b.module',
                        segment_blueprint:is_platform_type(t.PLATFORM_DOUBLE) and 'modules/assets/lamp_era_c_double.module' or 'modules/assets/lamp_era_c.module'
                    }

                    if params.shelter == 0 or segment_blueprint:get_current_segment() ~= 1 or segment_blueprint:has_odd_segment_count() then
                        segment_blueprint:add_asset(1, t.ASSET_DECORATION, lamp_modules[params.modutram_lamps])
                    end

                    if params.shelter == 0 or segment_blueprint:get_current_segment() ~= 0 or segment_blueprint:has_even_segment_count() then
                        segment_blueprint:add_asset(2, t.ASSET_DECORATION, lamp_modules[params.modutram_lamps])
                    end

                    if segment_blueprint:is_top_platform_segment() then
                        segment_blueprint:add_asset(3, t.ASSET_DECORATION, lamp_modules[params.modutram_lamps])
                    end
                end

                -- Benches
                if params.modutram_benches > 0 then
                    local bench_modules = {
                        'modules/assets/bench_era_a.module',
                        'modules/assets/bench_era_b.module',
                        'modules/assets/bench_era_c.module'
                    }

                    if segment_blueprint:get_current_segment() < 0 then
                        segment_blueprint:add_asset(6, t.ASSET_DECORATION, bench_modules[params.modutram_benches])
                        segment_blueprint:add_asset(7, t.ASSET_DECORATION, bench_modules[params.modutram_benches])
                    elseif segment_blueprint:get_current_segment() > (segment_blueprint:get_total_segment_count() + 1) % 2 then
                        segment_blueprint:add_asset(4, t.ASSET_DECORATION, bench_modules[params.modutram_benches])
                        segment_blueprint:add_asset(5, t.ASSET_DECORATION, bench_modules[params.modutram_benches])
                    end
                end

                -- Billboards
                if params.modutram_billboards > 0 then
                    local billboard_modules = {
                        'modules/assets/billboard_era_a_1.module',
                        'modules/assets/billboard_era_b_1.module',
                        'modules/assets/billboard_era_c_1.module'
                    }

                    if segment_blueprint:get_current_segment() < 0 then
                        segment_blueprint:add_asset(5, t.ASSET_DECORATION, select_billboard(params.modutram_billboards, 5, segment_blueprint:get_current_segment()))
                    elseif segment_blueprint:get_current_segment() > (segment_blueprint:get_total_segment_count() + 1) % 2 then
                        segment_blueprint:add_asset(6, t.ASSET_DECORATION, select_billboard(params.modutram_billboards, 6, segment_blueprint:get_current_segment()))
                    end
                end

                -- Stop Signs
                if params.modutram_stop_signs > 0 then
                    local stop_sign_modules = {
                        'modules/assets/sign_bus_era_a.module',
                        'modules/assets/sign_bus_era_b.module',
                        'modules/assets/sign_bus_era_c.module'
                    }

                    if segment_blueprint:is_top_platform_segment() then
                        segment_blueprint:add_asset(10, t.ASSET_DECORATION, stop_sign_modules[params.modutram_stop_signs])
                    end

                    if segment_blueprint:is_bottom_platform_segment() then
                        segment_blueprint:add_asset(8, t.ASSET_DECORATION, stop_sign_modules[params.modutram_stop_signs])
                    end
                end

                -- Station Name Signs
                if params.modutram_station_signs > 0 then
                    local station_sign_modules = {
                        'modules/assets/station_sign_era_a.module',
                        'modules/assets/station_sign_era_b.module',
                        'modules/assets/station_sign_era_c.module'
                    }

                    if segment_blueprint:get_current_segment() == -1 then
                        segment_blueprint:add_asset(2, t.ASSET_STATION_SIGN, station_sign_modules[params.modutram_station_signs])
                    elseif segment_blueprint:get_current_segment() == ((segment_blueprint:get_total_segment_count() + 1) % 2) + 1 then
                        segment_blueprint:add_asset(1, t.ASSET_STATION_SIGN, station_sign_modules[params.modutram_station_signs])
                    end
                end

                -- Destination Display
                if params.modutram_destination_display == 1 and segment_blueprint:get_current_segment() == 0 then
                    if segment_blueprint:has_even_segment_count() then
                        segment_blueprint:add_asset(9, t.ASSET_DECORATION, 'modules/assets/destination_display_era_c.module')
                    else
                        segment_blueprint:add_asset(8, t.ASSET_DECORATION, 'modules/assets/destination_display_era_c.module')
                    end 
                end
            end)

            return blueprint:create_template()
        end,
        updateFn = function(params)
            local station = Station:new({planning_mode = params.modutram_planning_mode}, params.modules or {})
            return station:get_data()
        end
    }    
end
    