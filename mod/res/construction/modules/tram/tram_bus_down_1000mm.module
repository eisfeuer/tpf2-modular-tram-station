local makeGroundFaceFromGridModule = require("modutram.utils.makeGroundFaceFromGridModule")
local makeLot = require("modutram.utils.makeLot")
local transf = require("transf")
local trammoduleutils = require("utils.trammoduleutils")

function data()
    return {
        cost = {
            price = 20000,
        },
        category = {
            categories = { "Tram", },
        },
        description = {
            name = _("tram_tracks"),
            description = _("1000mm"),
            icon = "ui/construction/modules/modular_tram_station/tram_up.tga"
        }, 
        availability = {
            yearFrom = 0,
            yearTo = 0
        },
        type = "modutram_tram_down_266cm",
        order = {
            value = 999990104,
        },
        metadata = {
            modutram = {
                themes = { "era_c" },
                themeType = "tram_down",
                hasTramRails = true
            },
        },
        updateFn = function(result, transform, tag, slotId, addModelFn, params)
            local gridModule = result.modutram:getModule(slotId)

            gridModule:addAssetSlot(result, 1, "modutram_asset_catenary", transf.mul(transform, transf.transl({x = 0, y = 0, z = 1})))

            if not gridModule:hasNeighborTop() then
                gridModule:addAssetSlot(
                    result,
                    3, 
                    "modutram_asset_tram_street_connection",
                    transf.mul(transform, transf.transl({x = 0, y = result.modutram.config.gridModuleLength / 2, z = 0})),
                    {gridModule:getOption("widthInCm", 1) / 200, gridModule:getOption("widthInCm", 1) / 200, 0, 10})
            end

            if not gridModule:hasNeighborBottom() then
                gridModule:addAssetSlot(
                    result,
                    4, 
                    "modutram_asset_tram_street_connection",
                    transf.mul(transform, transf.rotZTransl(math.pi, {x = 0, y = -result.modutram.config.gridModuleLength / 2, z = 0})),
                    {gridModule:getOption("widthInCm", 1) / 200, gridModule:getOption("widthInCm", 1) / 200, 0, 10})
            end

            local groundFace = makeGroundFaceFromGridModule(gridModule, transform)
            makeLot(result, groundFace)

            addModelFn("station/tram/modular_tram_station/tram_track_rep_era_c.mdl")
            
            local electrificationSuffix = gridModule:hasAsset(1) and "_electrified" or ""
            local terminalPosition = 0
            gridModule:handleTerminals(function (terminalGroup)
                local vehicleNodeOffset = terminalGroup.vehicleStopAlignment == 'top' and 4 or 0

                if gridModule:hasTerminals() then
                    terminalGroup:attachVehicleTerminal(terminalPosition, vehicleNodeOffset)
                else
                    terminalPosition = terminalGroup:addVehicleTerminalModel(
                        "station/tram/modular_tram_station/path/tram_bus_stop" .. electrificationSuffix .. ".mdl",
                        transf.mul(transform, transf.rotZ(math.pi)),
                        1 + vehicleNodeOffset
                    )
                end
            end)

            trammoduleutils.addCrossing(gridModule, addModelFn)

            gridModule:handleLanes(function ()
                if not gridModule:hasTerminals() then
                    addModelFn("station/tram/modular_tram_station/path/tram_bus_lane" .. electrificationSuffix ..".mdl", transf.rotZ(math.pi))
                end
            end)
        end,
        getModelsFn = function()
            return {{
                id = "station/tram/modular_tram_station/tram_track_rep_era_c.mdl",
                transf = {
                    1, 0, 0, 0,
                    0, 1, 0, 0,
                    0, 0, 1, 0,
                    0, 0, 0, 1,
                }
            }}
        end
    }
end