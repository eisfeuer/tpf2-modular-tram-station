local makeGroundFaceFromGridModule = require("modutram.utils.makeGroundFaceFromGridModule")
local makeLot = require("modutram.utils.makeLot")
local transf = require("transf")
local makeCollider = require("modutram.utils.makaCollider")

function data()
    return {
        cost = {
            price = 10000,
        },
        category = {
            categories = { "Platforms - Right", },
        },
        description = {
            name = _("module_platform_access_name"),
            description = _("era_c") .. "\n" .. _("ramp_module_desc"),
            icon = "ui/construction/modules/modular_tram_station/platform_side_ramp_era_c.tga"
        }, 
        availability = {
            yearFrom = 1980,
            yearTo = 0
        },
        type = "modutram_platform_right_330cm",
        order = {
            value = 999990632,
        },
        metadata = {
            modutram = {
                hasTerminals = false,
                hasCrossingConnection = true,
                isRegularPlatform = false,
                themes = { "era_c" },
                themeType = "platform_right_ramp",
            }
        },
        updateFn = function(result, transform, tag, slotId, addModelFn, params)
            local module = result.modutram:getModule(slotId)

            local groundFace = makeGroundFaceFromGridModule(module, transform)
            makeLot(result, groundFace)
            makeCollider(result, module)

            if module:getNeighborTop():isPlatform() then
                addModelFn("station/tram/modular_tram_station/path/passenger_lane.mdl", transf.scale({x = 0, y = 4.5, z = 0}))

                if module:getNeighborTop():getOption("isRegularPlatform", true) then
                    addModelFn("station/tram/modutram_platform_single_access_btm_era_c.mdl", transf.rotZTransl(0, {x = 0, y = module.config.gridModuleLength / 2, z = 0}))
                    addModelFn("station/tram/modular_tram_station/path/passenger_lane.mdl", transf.scaleXYZRotZTransl({x = 0, y = 1.5, z = 0}, 0, {x = 0, y = 4.5, z = 0}))
                    addModelFn("station/tram/modular_tram_station/path/passenger_lane.mdl", transf.scaleXYZRotZTransl({x = 0, y = 2.0, z = 0.15}, 0, {x = 0, y = 6, z = 0}))
                    addModelFn("station/tram/modular_tram_station/path/passenger_lane.mdl", transf.scaleXYZRotZTransl({x = 0, y = 1.0, z = 0}, 0, {x = 0, y = 8, z = 0.15}))
                else
                    addModelFn("station/tram/modular_tram_station/path/passenger_lane.mdl", transf.scaleXYZRotZTransl({x = 0, y = 4.5, z = 0}, 0, {x = 0, y = 4.5, z = 0}))
                end

                if not module:hasNeighborLeft() then
                    addModelFn("station/tram/modular_tram_station/path/passenger_lane.mdl", transf.scaleXYZRotZTransl({x = -module:getOption("widthInCm") / 200, y = 0, z = 0}, 0, {x = 0, y = 4.5, z = 0}))
                    addModelFn("station/tram/modular_tram_station/path/passenger_link.mdl", transf.scaleXYZRotZTransl({x = 0, y = 4.5, z = 0}, 0, {x = -module:getOption("widthInCm") / 200, y = 0, z = 0}))
                end
            end

            addModelFn("station/tram/modular_tram_station/path/passenger_lane.mdl", transf.scale({x = module:getOption("widthInCm") / 200, y = 0, z = 0}))
            addModelFn("station/tram/modular_tram_station/path/passenger_lane.mdl", transf.scale({x = -module:getOption("widthInCm") / 200, y = 0, z = 0}))

            if module:getNeighborBottom():isPlatform() then
                addModelFn("station/tram/modular_tram_station/path/passenger_lane.mdl", transf.scale({x = 0, y = -4.5, z = 0}))

                if module:getNeighborBottom():getOption("isRegularPlatform", true) then
                    addModelFn("station/tram/modutram_platform_single_access_top_era_c.mdl", transf.rotZTransl(0, {x = 0, y = -module.config.gridModuleLength / 2, z = 0}))
                    addModelFn("station/tram/modular_tram_station/path/passenger_lane.mdl", transf.scaleXYZRotZTransl({x = 0, y = -1.5, z = 0}, 0, {x = 0, y = -4.5, z = 0}))
                    addModelFn("station/tram/modular_tram_station/path/passenger_lane.mdl", transf.scaleXYZRotZTransl({x = 0, y = -2.0, z = 0.15}, 0, {x = 0, y = -6, z = 0}))
                    addModelFn("station/tram/modular_tram_station/path/passenger_lane.mdl", transf.scaleXYZRotZTransl({x = 0, y = -1.0, z = 0}, 0, {x = 0, y = -8, z = 0.15}))
                else
                    addModelFn("station/tram/modular_tram_station/path/passenger_lane.mdl", transf.scaleXYZRotZTransl({x = 0, y = -4.5, z = 0}, 0, {x = 0, y = -4.5, z = 0}))
                end

                if not module:hasNeighborLeft() then
                    addModelFn("station/tram/modular_tram_station/path/passenger_lane.mdl", transf.scaleXYZRotZTransl({x = -module:getOption("widthInCm") / 200, y = 0, z = 0}, 0, {x = 0, y = -4.5, z = 0}))
                    addModelFn("station/tram/modular_tram_station/path/passenger_link.mdl", transf.scaleXYZRotZTransl({x = 0, y = -4.5, z = 0}, 0, {x = -module:getOption("widthInCm") / 200, y = 0, z = 0}))
                end
            end
        end,
        getModelsFn = function()
            return {{
                id = "station/tram/modutram_platform_single_access_btm_era_c.mdl",
                transf = {
                    1, 0, 0, 0,
                    0, 1, 0, 0,
                    0, 0, 1, 0,
                    0, 0, 0, 1,
                }
            }}
        end
    }
end